digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{testing::TestCase\n|- name_\l- type_param_\l- test_info_list_\l- test_indices_\l- set_up_tc_\l- tear_down_tc_\l- should_run_\l- elapsed_time_\l- ad_hoc_test_result_\l|+ TestCase()\l+ ~TestCase()\l+ name()\l+ type_param()\l+ should_run()\l+ successful_test_count()\l+ failed_test_count()\l+ reportable_disabled_test_count()\l+ disabled_test_count()\l+ reportable_test_count()\land 23 more...- test_info_list()\l- test_info_list()\l- GetMutableTestInfo()\l- set_should_run()\l- AddTestInfo()\l- ClearResult()\l- Run()\l- RunSetUpTestCase()\l- RunTearDownTestCase()\l- ShuffleTests()\land 13 more...- ClearTestCaseResult()\l- TestPassed()\l- TestFailed()\l- TestReportableDisabled()\l- TestDisabled()\l- TestReportable()\l- ShouldRunTest()\l- ClearTestCaseResult()\l- TestPassed()\l- TestFailed()\l- TestReportableDisabled()\l- TestDisabled()\l- TestReportable()\l- ShouldRunTest()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" ad_hoc_test_result_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{testing::TestResult\n|- test_properites_mutex_\l- test_part_results_\l- test_properties_\l- death_test_count_\l- elapsed_time_\l|+ TestResult()\l+ ~TestResult()\l+ total_part_count()\l+ test_property_count()\l+ Passed()\l+ Failed()\l+ HasFatalFailure()\l+ HasNonfatalFailure()\l+ elapsed_time()\l+ GetTestPartResult()\land 11 more...- test_part_results()\l- test_properties()\l- set_elapsed_time()\l- RecordProperty()\l- AddTestPartResult()\l- death_test_count()\l- increment_death_test_count()\l- ClearTestPartResults()\l- Clear()\l- GTEST_DISALLOW_COPY_AND_ASSIGN_()\land 9 more...- ValidateTestProperty()\l- ValidateTestProperty()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classtesting_1_1TestResult.html"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" test_properites_mutex_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{testing::internal::Mutex\n||+ Mutex()\l+ Lock()\l+ Unlock()\l+ AssertHeld()\l+ Mutex()\l+ Lock()\l+ Unlock()\l+ AssertHeld()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classtesting_1_1internal_1_1Mutex.html"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" name_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{string\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" type_param_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{testing::internal::scoped_ptr\< const ::std::string \>\n|- ptr_\l|+ scoped_ptr()\l+ scoped_ptr()\l+ ~scoped_ptr()\l+ ~scoped_ptr()\l+ operator*()\l+ operator*()\l+ operator-\>()\l+ operator-\>()\l+ get()\l+ get()\l+ release()\l+ release()\l+ reset()\l+ reset()\l- GTEST_DISALLOW_COPY_AND_ASSIGN_()\l- GTEST_DISALLOW_COPY_AND_ASSIGN_()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classtesting_1_1internal_1_1scoped__ptr.html"];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="solid",label=" \< const ::std::string \>" ,fontname="Helvetica"];
  Node6 [label="{testing::internal::scoped_ptr\< T \>\n|- ptr_\l|+ scoped_ptr()\l+ ~scoped_ptr()\l+ operator*()\l+ operator-\>()\l+ get()\l+ release()\l+ reset()\l+ scoped_ptr()\l+ ~scoped_ptr()\l+ operator*()\l+ operator-\>()\l+ get()\l+ release()\l+ reset()\l- GTEST_DISALLOW_COPY_AND_ASSIGN_()\l- GTEST_DISALLOW_COPY_AND_ASSIGN_()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classtesting_1_1internal_1_1scoped__ptr.html"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ptr_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
